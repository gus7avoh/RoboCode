package Fox;


import robocode.*;//importação do robocode
import static robocode.util.Utils.normalRelativeAngleDegrees;
import java.awt.*;//importação gráfica
import robocode.Robot;
import robocode.HitRobotEvent;
import robocode.ScannedRobotEvent;
import robocode.WinEvent;
import robocode.HitWallEvent;

public class Fox extends AdvancedRobot {
	boolean movingForward;
	boolean inWall;
	boolean peek;
	double moveAmount;	
	
	public void run() {

		setColors(Color.gray,Color.black,Color.orange,Color.orange,Color.green);
		setAdjustRadarForRobotTurn(true);
		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);
		

		moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());
		if (getRadarTurnRemaining() == 0.0){
			setTurnRadarRight(360);
		}
		peek = true;
		turnLeft(getHeading() % 90);
		ahead(moveAmount);
		turnGunRight(90);
		turnRight(90);

		while (true) {
			peek = true;
			ahead(moveAmount);
			peek = true;
			turnRight(90);
			if (getRadarTurnRemaining() == 0.0){
			setTurnRadarRight(360);
			}
		}
	}


	public void onScannedRobot(ScannedRobotEvent e) {
		// localização do inimigo
		double absoluteBearing = getHeading() + e.getBearing();
		double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());
		double bearingFromRadar = normalRelativeAngleDegrees(absoluteBearing - getRadarHeading());
		// Virar a arma para a direçao do inimigo e radar tambem
			setTurnGunRight(bearingFromGun); 
			setTurnRadarRight(bearingFromRadar);	
		//mantem o radar no inimigo
		if (getGunHeat() == 0 && getEnergy() > .2) { 
				fire(Math.min(10 - Math.abs(bearingFromGun) / 2 - e.getDistance() / 250, getEnergy() - .1));
			} 
		//Caso não funcione, procurar inimigo de novo
		else {
			setTurnGunRight(bearingFromGun);
			setTurnRadarRight(bearingFromRadar);
		}
	}
}
